#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' ),
	path = require( 'path' ),
	parseArgs = require( 'minimist' ),
	opts = require( './opts.json' );


// VARIABLES //

var SIGTERM = 128 + 15,
	SIGINT = 128 + 2,
	SIGHUP = 128 + 1,
	stream;


// FUNCTIONS //

/**
* FUNCTION: onClose()
*	Callback invoked upon writing a file to `stdout`.
*
* @private
*/
function onClose() {
	process.exit( 1 );
}

/**
* FUNCTION: onError( evt )
*	Event listener invoked when a stream instance emits an `error`.
*
* @private
* @param {Object} evt - error event object
*/
function onError( evt ) {
	console.error( evt );
}

/**
* FUNCTION: sigterm()
*	Callback invoked upon the process receiving a SIGTERM signal.
*
* @private
*/
function sigterm() {
	cleanup( onCleanup( SIGTERM ) );
}

/**
* FUNCTION: sigint()
*	Callback invoked upon the process receiving a SIGINT signal.
*
* @private
*/
function sigint() {
	cleanup( onCleanup( SIGINT ) );
}

/**
* FUNCTION: sighup()
*	Callback invoked upon the process receiving a SIGHUP signal.
*
* @private
*/
function sighup() {
	cleanup( onCleanup( SIGHUP ) );
}

/**
* FUNCTION: cleanup( clbk )
*	Performs any cleanup tasks before the process exits.
*
* @private
* @param {Function} clbk - callback to invoke once cleanup tasks are finished
*/
function cleanup( clbk ) {
	stream.stop();
	if ( stream.pending ) {
		stream.on( 'pending', onPending );
	} else {
		clbk();
	}
	function onPending( count ) {
		if ( count === 0 ) {
			clbk();
		}
	}
}

/**
* FUNCTION: onCleanup( code )
*	Encloses an exit code and returns a callback.
*
* @private
* @param {Number} code - exit code
* @returns {Function} callback
*/
function onCleanup( code ) {
	/**
	* FUNCTION: done()
	*	Callback invoked once cleanup tasks are complete. Exits the process.
	*
	* @private
	*/
	return function done() {
		process.exit( code );
	};
}


// INIT //

process.stdout.on( 'error', process.exit );


// ARGUMENTS //

var args = parseArgs( process.argv.slice( 2 ), opts );


// HELP //

if ( args.help ) {
	fs.createReadStream( path.join( __dirname, 'usage.txt' ) )
		.pipe( process.stdout )
		.on( 'close', onClose );
    return;
}


// VERSION //

if ( args.version ) {
	console.log( require( '../package.json' ).version );
	return;
}


// STREAM //

opts = require( './defaults.json' );

// [0] Get the URI...
if ( args._.length ) {
	opts.uri = args._[ 0 ];
} else {
	opts.uri = args.uri;
}
// [1] Option for polling a remote endpoint...
if ( args.interval ) {
	opts.interval = parseFloat( args.interval );
}
// [2] Create a new stream instance:
stream = require( './../lib' )( opts );

// [3] Add event listeners:
stream.on( 'error', onError );

// [4] Pipe to standard out:
stream.pipe( process.stdout );

// [5] Only add signal listeners if we are polling a remote endpoint...
if ( opts.interval ) {
	process.on( 'SIGTERM', sigterm );
	process.on( 'SIGINT', sigint );
	process.on( 'SIGHUP', sighup );
}